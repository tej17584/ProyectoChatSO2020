// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mensaje.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mensaje.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chat {

namespace {

const ::google::protobuf::Descriptor* MyInfoSynchronize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyInfoSynchronize_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyInfoAcknowledge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyInfoAcknowledge_reflection_ = NULL;
const ::google::protobuf::Descriptor* connectedUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connectedUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectedUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectedUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectedUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectedUserResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirectMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirectMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirectMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mensaje_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mensaje_2eproto() {
  protobuf_AddDesc_mensaje_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mensaje.proto");
  GOOGLE_CHECK(file != NULL);
  MyInfoSynchronize_descriptor_ = file->message_type(0);
  static const int MyInfoSynchronize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyInfoSynchronize, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyInfoSynchronize, ip_),
  };
  MyInfoSynchronize_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyInfoSynchronize_descriptor_,
      MyInfoSynchronize::default_instance_,
      MyInfoSynchronize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyInfoSynchronize, _has_bits_[0]),
      -1,
      -1,
      sizeof(MyInfoSynchronize),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyInfoSynchronize, _internal_metadata_),
      -1);
  MyInfoResponse_descriptor_ = file->message_type(1);
  static const int MyInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyInfoResponse, userid_),
  };
  MyInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyInfoResponse_descriptor_,
      MyInfoResponse::default_instance_,
      MyInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyInfoResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(MyInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyInfoResponse, _internal_metadata_),
      -1);
  MyInfoAcknowledge_descriptor_ = file->message_type(2);
  static const int MyInfoAcknowledge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyInfoAcknowledge, userid_),
  };
  MyInfoAcknowledge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyInfoAcknowledge_descriptor_,
      MyInfoAcknowledge::default_instance_,
      MyInfoAcknowledge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyInfoAcknowledge, _has_bits_[0]),
      -1,
      -1,
      sizeof(MyInfoAcknowledge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyInfoAcknowledge, _internal_metadata_),
      -1);
  connectedUserRequest_descriptor_ = file->message_type(3);
  static const int connectedUserRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectedUserRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectedUserRequest, username_),
  };
  connectedUserRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      connectedUserRequest_descriptor_,
      connectedUserRequest::default_instance_,
      connectedUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectedUserRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(connectedUserRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectedUserRequest, _internal_metadata_),
      -1);
  ConnectedUser_descriptor_ = file->message_type(4);
  static const int ConnectedUser_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedUser, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedUser, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedUser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedUser, ip_),
  };
  ConnectedUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectedUser_descriptor_,
      ConnectedUser::default_instance_,
      ConnectedUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedUser, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConnectedUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedUser, _internal_metadata_),
      -1);
  ConnectedUserResponse_descriptor_ = file->message_type(5);
  static const int ConnectedUserResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedUserResponse, connectedusers_),
  };
  ConnectedUserResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectedUserResponse_descriptor_,
      ConnectedUserResponse::default_instance_,
      ConnectedUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedUserResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConnectedUserResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedUserResponse, _internal_metadata_),
      -1);
  ChangeStatusRequest_descriptor_ = file->message_type(6);
  static const int ChangeStatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStatusRequest, status_),
  };
  ChangeStatusRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangeStatusRequest_descriptor_,
      ChangeStatusRequest::default_instance_,
      ChangeStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStatusRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChangeStatusRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStatusRequest, _internal_metadata_),
      -1);
  ChangeStatusResponse_descriptor_ = file->message_type(7);
  static const int ChangeStatusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStatusResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStatusResponse, status_),
  };
  ChangeStatusResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangeStatusResponse_descriptor_,
      ChangeStatusResponse::default_instance_,
      ChangeStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStatusResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChangeStatusResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStatusResponse, _internal_metadata_),
      -1);
  BroadcastRequest_descriptor_ = file->message_type(8);
  static const int BroadcastRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastRequest, message_),
  };
  BroadcastRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BroadcastRequest_descriptor_,
      BroadcastRequest::default_instance_,
      BroadcastRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(BroadcastRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastRequest, _internal_metadata_),
      -1);
  BroadcastResponse_descriptor_ = file->message_type(9);
  static const int BroadcastResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastResponse, messagestatus_),
  };
  BroadcastResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BroadcastResponse_descriptor_,
      BroadcastResponse::default_instance_,
      BroadcastResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(BroadcastResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastResponse, _internal_metadata_),
      -1);
  BroadcastMessage_descriptor_ = file->message_type(10);
  static const int BroadcastMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessage, userid_),
  };
  BroadcastMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BroadcastMessage_descriptor_,
      BroadcastMessage::default_instance_,
      BroadcastMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(BroadcastMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessage, _internal_metadata_),
      -1);
  DirectMessageRequest_descriptor_ = file->message_type(11);
  static const int DirectMessageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessageRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessageRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessageRequest, username_),
  };
  DirectMessageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DirectMessageRequest_descriptor_,
      DirectMessageRequest::default_instance_,
      DirectMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessageRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(DirectMessageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessageRequest, _internal_metadata_),
      -1);
  DirectMessageResponse_descriptor_ = file->message_type(12);
  static const int DirectMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessageResponse, messagestatus_),
  };
  DirectMessageResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DirectMessageResponse_descriptor_,
      DirectMessageResponse::default_instance_,
      DirectMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessageResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(DirectMessageResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessageResponse, _internal_metadata_),
      -1);
  DirectMessage_descriptor_ = file->message_type(13);
  static const int DirectMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessage, userid_),
  };
  DirectMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DirectMessage_descriptor_,
      DirectMessage::default_instance_,
      DirectMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(DirectMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMessage, _internal_metadata_),
      -1);
  ErrorResponse_descriptor_ = file->message_type(14);
  static const int ErrorResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorResponse, errormessage_),
  };
  ErrorResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ErrorResponse_descriptor_,
      ErrorResponse::default_instance_,
      ErrorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ErrorResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorResponse, _internal_metadata_),
      -1);
  ClientMessage_descriptor_ = file->message_type(15);
  static const int ClientMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, synchronize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, connectedusers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, changestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, directmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, acknowledge_),
  };
  ClientMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientMessage_descriptor_,
      ClientMessage::default_instance_,
      ClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClientMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _internal_metadata_),
      -1);
  ServerMessage_descriptor_ = file->message_type(16);
  static const int ServerMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, myinforesponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, connecteduserresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, changestatusresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, broadcastresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, directmessageresponse_),
  };
  ServerMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerMessage_descriptor_,
      ServerMessage::default_instance_,
      ServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mensaje_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyInfoSynchronize_descriptor_, &MyInfoSynchronize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyInfoResponse_descriptor_, &MyInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyInfoAcknowledge_descriptor_, &MyInfoAcknowledge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      connectedUserRequest_descriptor_, &connectedUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectedUser_descriptor_, &ConnectedUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectedUserResponse_descriptor_, &ConnectedUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangeStatusRequest_descriptor_, &ChangeStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangeStatusResponse_descriptor_, &ChangeStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BroadcastRequest_descriptor_, &BroadcastRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BroadcastResponse_descriptor_, &BroadcastResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BroadcastMessage_descriptor_, &BroadcastMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DirectMessageRequest_descriptor_, &DirectMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DirectMessageResponse_descriptor_, &DirectMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DirectMessage_descriptor_, &DirectMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ErrorResponse_descriptor_, &ErrorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientMessage_descriptor_, &ClientMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerMessage_descriptor_, &ServerMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mensaje_2eproto() {
  delete MyInfoSynchronize::default_instance_;
  delete MyInfoSynchronize_reflection_;
  delete MyInfoResponse::default_instance_;
  delete MyInfoResponse_reflection_;
  delete MyInfoAcknowledge::default_instance_;
  delete MyInfoAcknowledge_reflection_;
  delete connectedUserRequest::default_instance_;
  delete connectedUserRequest_reflection_;
  delete ConnectedUser::default_instance_;
  delete ConnectedUser_reflection_;
  delete ConnectedUserResponse::default_instance_;
  delete ConnectedUserResponse_reflection_;
  delete ChangeStatusRequest::default_instance_;
  delete ChangeStatusRequest_reflection_;
  delete ChangeStatusResponse::default_instance_;
  delete ChangeStatusResponse_reflection_;
  delete BroadcastRequest::default_instance_;
  delete BroadcastRequest_reflection_;
  delete BroadcastResponse::default_instance_;
  delete BroadcastResponse_reflection_;
  delete BroadcastMessage::default_instance_;
  delete BroadcastMessage_reflection_;
  delete DirectMessageRequest::default_instance_;
  delete DirectMessageRequest_reflection_;
  delete DirectMessageResponse::default_instance_;
  delete DirectMessageResponse_reflection_;
  delete DirectMessage::default_instance_;
  delete DirectMessage_reflection_;
  delete ErrorResponse::default_instance_;
  delete ErrorResponse_reflection_;
  delete ClientMessage::default_instance_;
  delete ClientMessage_reflection_;
  delete ServerMessage::default_instance_;
  delete ServerMessage_reflection_;
}

void protobuf_AddDesc_mensaje_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mensaje_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmensaje.proto\022\004chat\"1\n\021MyInfoSynchroni"
    "ze\022\020\n\010username\030\001 \002(\t\022\n\n\002ip\030\002 \001(\t\" \n\016MyIn"
    "foResponse\022\016\n\006userId\030\001 \002(\005\"#\n\021MyInfoAckn"
    "owledge\022\016\n\006userId\030\001 \002(\005\"8\n\024connectedUser"
    "Request\022\016\n\006userId\030\001 \001(\005\022\020\n\010username\030\002 \001("
    "\t\"M\n\rConnectedUser\022\020\n\010username\030\001 \002(\t\022\016\n\006"
    "status\030\002 \001(\t\022\016\n\006userId\030\003 \001(\005\022\n\n\002ip\030\004 \001(\t"
    "\"D\n\025ConnectedUserResponse\022+\n\016connectedUs"
    "ers\030\001 \003(\0132\023.chat.ConnectedUser\"%\n\023Change"
    "StatusRequest\022\016\n\006status\030\001 \002(\t\"6\n\024ChangeS"
    "tatusResponse\022\016\n\006userId\030\001 \002(\005\022\016\n\006status\030"
    "\002 \002(\t\"#\n\020BroadcastRequest\022\017\n\007message\030\001 \002"
    "(\t\"*\n\021BroadcastResponse\022\025\n\rmessageStatus"
    "\030\001 \002(\t\"3\n\020BroadcastMessage\022\017\n\007message\030\001 "
    "\002(\t\022\016\n\006userId\030\002 \002(\005\"I\n\024DirectMessageRequ"
    "est\022\017\n\007message\030\001 \002(\t\022\016\n\006userId\030\002 \001(\005\022\020\n\010"
    "username\030\003 \001(\t\".\n\025DirectMessageResponse\022"
    "\025\n\rmessageStatus\030\001 \002(\t\"0\n\rDirectMessage\022"
    "\017\n\007message\030\001 \002(\t\022\016\n\006userId\030\002 \002(\005\"%\n\rErro"
    "rResponse\022\024\n\014errorMessage\030\001 \002(\t\"\316\002\n\rClie"
    "ntMessage\022\016\n\006option\030\001 \002(\005\022\016\n\006userId\030\002 \001("
    "\005\022,\n\013synchronize\030\003 \001(\0132\027.chat.MyInfoSync"
    "hronize\0222\n\016connectedUsers\030\004 \001(\0132\032.chat.c"
    "onnectedUserRequest\022/\n\014changeStatus\030\005 \001("
    "\0132\031.chat.ChangeStatusRequest\022)\n\tbroadcas"
    "t\030\006 \001(\0132\026.chat.BroadcastRequest\0221\n\rdirec"
    "tMessage\030\007 \001(\0132\032.chat.DirectMessageReque"
    "st\022,\n\013acknowledge\030\010 \001(\0132\027.chat.MyInfoAck"
    "nowledge\"\250\003\n\rServerMessage\022\016\n\006option\030\001 \002"
    "(\005\022)\n\tbroadcast\030\002 \001(\0132\026.chat.BroadcastMe"
    "ssage\022$\n\007message\030\003 \001(\0132\023.chat.DirectMess"
    "age\022\"\n\005error\030\004 \001(\0132\023.chat.ErrorResponse\022"
    ",\n\016myInfoResponse\030\005 \001(\0132\024.chat.MyInfoRes"
    "ponse\022:\n\025connectedUserResponse\030\006 \001(\0132\033.c"
    "hat.ConnectedUserResponse\0228\n\024changeStatu"
    "sResponse\030\007 \001(\0132\032.chat.ChangeStatusRespo"
    "nse\0222\n\021broadcastResponse\030\010 \001(\0132\027.chat.Br"
    "oadcastResponse\022:\n\025directMessageResponse"
    "\030\t \001(\0132\033.chat.DirectMessageResponse", 1555);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mensaje.proto", &protobuf_RegisterTypes);
  MyInfoSynchronize::default_instance_ = new MyInfoSynchronize();
  MyInfoResponse::default_instance_ = new MyInfoResponse();
  MyInfoAcknowledge::default_instance_ = new MyInfoAcknowledge();
  connectedUserRequest::default_instance_ = new connectedUserRequest();
  ConnectedUser::default_instance_ = new ConnectedUser();
  ConnectedUserResponse::default_instance_ = new ConnectedUserResponse();
  ChangeStatusRequest::default_instance_ = new ChangeStatusRequest();
  ChangeStatusResponse::default_instance_ = new ChangeStatusResponse();
  BroadcastRequest::default_instance_ = new BroadcastRequest();
  BroadcastResponse::default_instance_ = new BroadcastResponse();
  BroadcastMessage::default_instance_ = new BroadcastMessage();
  DirectMessageRequest::default_instance_ = new DirectMessageRequest();
  DirectMessageResponse::default_instance_ = new DirectMessageResponse();
  DirectMessage::default_instance_ = new DirectMessage();
  ErrorResponse::default_instance_ = new ErrorResponse();
  ClientMessage::default_instance_ = new ClientMessage();
  ServerMessage::default_instance_ = new ServerMessage();
  MyInfoSynchronize::default_instance_->InitAsDefaultInstance();
  MyInfoResponse::default_instance_->InitAsDefaultInstance();
  MyInfoAcknowledge::default_instance_->InitAsDefaultInstance();
  connectedUserRequest::default_instance_->InitAsDefaultInstance();
  ConnectedUser::default_instance_->InitAsDefaultInstance();
  ConnectedUserResponse::default_instance_->InitAsDefaultInstance();
  ChangeStatusRequest::default_instance_->InitAsDefaultInstance();
  ChangeStatusResponse::default_instance_->InitAsDefaultInstance();
  BroadcastRequest::default_instance_->InitAsDefaultInstance();
  BroadcastResponse::default_instance_->InitAsDefaultInstance();
  BroadcastMessage::default_instance_->InitAsDefaultInstance();
  DirectMessageRequest::default_instance_->InitAsDefaultInstance();
  DirectMessageResponse::default_instance_->InitAsDefaultInstance();
  DirectMessage::default_instance_->InitAsDefaultInstance();
  ErrorResponse::default_instance_->InitAsDefaultInstance();
  ClientMessage::default_instance_->InitAsDefaultInstance();
  ServerMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mensaje_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mensaje_2eproto {
  StaticDescriptorInitializer_mensaje_2eproto() {
    protobuf_AddDesc_mensaje_2eproto();
  }
} static_descriptor_initializer_mensaje_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyInfoSynchronize::kUsernameFieldNumber;
const int MyInfoSynchronize::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyInfoSynchronize::MyInfoSynchronize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MyInfoSynchronize)
}

void MyInfoSynchronize::InitAsDefaultInstance() {
}

MyInfoSynchronize::MyInfoSynchronize(const MyInfoSynchronize& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.MyInfoSynchronize)
}

void MyInfoSynchronize::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyInfoSynchronize::~MyInfoSynchronize() {
  // @@protoc_insertion_point(destructor:chat.MyInfoSynchronize)
  SharedDtor();
}

void MyInfoSynchronize::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MyInfoSynchronize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyInfoSynchronize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyInfoSynchronize_descriptor_;
}

const MyInfoSynchronize& MyInfoSynchronize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

MyInfoSynchronize* MyInfoSynchronize::default_instance_ = NULL;

MyInfoSynchronize* MyInfoSynchronize::New(::google::protobuf::Arena* arena) const {
  MyInfoSynchronize* n = new MyInfoSynchronize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyInfoSynchronize::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MyInfoSynchronize)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MyInfoSynchronize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.MyInfoSynchronize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.MyInfoSynchronize.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.MyInfoSynchronize.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.MyInfoSynchronize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.MyInfoSynchronize)
  return false;
#undef DO_
}

void MyInfoSynchronize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.MyInfoSynchronize)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.MyInfoSynchronize.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.MyInfoSynchronize.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.MyInfoSynchronize)
}

::google::protobuf::uint8* MyInfoSynchronize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.MyInfoSynchronize)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.MyInfoSynchronize.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.MyInfoSynchronize.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.MyInfoSynchronize)
  return target;
}

int MyInfoSynchronize::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MyInfoSynchronize)
  int total_size = 0;

  // required string username = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }
  // optional string ip = 2;
  if (has_ip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyInfoSynchronize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MyInfoSynchronize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MyInfoSynchronize* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyInfoSynchronize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MyInfoSynchronize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MyInfoSynchronize)
    MergeFrom(*source);
  }
}

void MyInfoSynchronize::MergeFrom(const MyInfoSynchronize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MyInfoSynchronize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MyInfoSynchronize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MyInfoSynchronize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyInfoSynchronize::CopyFrom(const MyInfoSynchronize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MyInfoSynchronize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyInfoSynchronize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MyInfoSynchronize::Swap(MyInfoSynchronize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyInfoSynchronize::InternalSwap(MyInfoSynchronize* other) {
  username_.Swap(&other->username_);
  ip_.Swap(&other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyInfoSynchronize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyInfoSynchronize_descriptor_;
  metadata.reflection = MyInfoSynchronize_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyInfoSynchronize

// required string username = 1;
bool MyInfoSynchronize::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MyInfoSynchronize::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void MyInfoSynchronize::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void MyInfoSynchronize::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& MyInfoSynchronize::username() const {
  // @@protoc_insertion_point(field_get:chat.MyInfoSynchronize.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MyInfoSynchronize::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MyInfoSynchronize.username)
}
 void MyInfoSynchronize::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MyInfoSynchronize.username)
}
 void MyInfoSynchronize::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MyInfoSynchronize.username)
}
 ::std::string* MyInfoSynchronize::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:chat.MyInfoSynchronize.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MyInfoSynchronize::release_username() {
  // @@protoc_insertion_point(field_release:chat.MyInfoSynchronize.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MyInfoSynchronize::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.MyInfoSynchronize.username)
}

// optional string ip = 2;
bool MyInfoSynchronize::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MyInfoSynchronize::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void MyInfoSynchronize::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void MyInfoSynchronize::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& MyInfoSynchronize::ip() const {
  // @@protoc_insertion_point(field_get:chat.MyInfoSynchronize.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MyInfoSynchronize::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MyInfoSynchronize.ip)
}
 void MyInfoSynchronize::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MyInfoSynchronize.ip)
}
 void MyInfoSynchronize::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MyInfoSynchronize.ip)
}
 ::std::string* MyInfoSynchronize::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:chat.MyInfoSynchronize.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MyInfoSynchronize::release_ip() {
  // @@protoc_insertion_point(field_release:chat.MyInfoSynchronize.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MyInfoSynchronize::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:chat.MyInfoSynchronize.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyInfoResponse::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyInfoResponse::MyInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MyInfoResponse)
}

void MyInfoResponse::InitAsDefaultInstance() {
}

MyInfoResponse::MyInfoResponse(const MyInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.MyInfoResponse)
}

void MyInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyInfoResponse::~MyInfoResponse() {
  // @@protoc_insertion_point(destructor:chat.MyInfoResponse)
  SharedDtor();
}

void MyInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyInfoResponse_descriptor_;
}

const MyInfoResponse& MyInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

MyInfoResponse* MyInfoResponse::default_instance_ = NULL;

MyInfoResponse* MyInfoResponse::New(::google::protobuf::Arena* arena) const {
  MyInfoResponse* n = new MyInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MyInfoResponse)
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MyInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.MyInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.MyInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.MyInfoResponse)
  return false;
#undef DO_
}

void MyInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.MyInfoResponse)
  // required int32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.MyInfoResponse)
}

::google::protobuf::uint8* MyInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.MyInfoResponse)
  // required int32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.MyInfoResponse)
  return target;
}

int MyInfoResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MyInfoResponse)
  int total_size = 0;

  // required int32 userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MyInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MyInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MyInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MyInfoResponse)
    MergeFrom(*source);
  }
}

void MyInfoResponse::MergeFrom(const MyInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MyInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MyInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MyInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyInfoResponse::CopyFrom(const MyInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MyInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MyInfoResponse::Swap(MyInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyInfoResponse::InternalSwap(MyInfoResponse* other) {
  std::swap(userid_, other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyInfoResponse_descriptor_;
  metadata.reflection = MyInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyInfoResponse

// required int32 userId = 1;
bool MyInfoResponse::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MyInfoResponse::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void MyInfoResponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MyInfoResponse::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
 ::google::protobuf::int32 MyInfoResponse::userid() const {
  // @@protoc_insertion_point(field_get:chat.MyInfoResponse.userId)
  return userid_;
}
 void MyInfoResponse::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:chat.MyInfoResponse.userId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyInfoAcknowledge::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyInfoAcknowledge::MyInfoAcknowledge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MyInfoAcknowledge)
}

void MyInfoAcknowledge::InitAsDefaultInstance() {
}

MyInfoAcknowledge::MyInfoAcknowledge(const MyInfoAcknowledge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.MyInfoAcknowledge)
}

void MyInfoAcknowledge::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyInfoAcknowledge::~MyInfoAcknowledge() {
  // @@protoc_insertion_point(destructor:chat.MyInfoAcknowledge)
  SharedDtor();
}

void MyInfoAcknowledge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyInfoAcknowledge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyInfoAcknowledge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyInfoAcknowledge_descriptor_;
}

const MyInfoAcknowledge& MyInfoAcknowledge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

MyInfoAcknowledge* MyInfoAcknowledge::default_instance_ = NULL;

MyInfoAcknowledge* MyInfoAcknowledge::New(::google::protobuf::Arena* arena) const {
  MyInfoAcknowledge* n = new MyInfoAcknowledge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyInfoAcknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MyInfoAcknowledge)
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MyInfoAcknowledge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.MyInfoAcknowledge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.MyInfoAcknowledge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.MyInfoAcknowledge)
  return false;
#undef DO_
}

void MyInfoAcknowledge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.MyInfoAcknowledge)
  // required int32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.MyInfoAcknowledge)
}

::google::protobuf::uint8* MyInfoAcknowledge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.MyInfoAcknowledge)
  // required int32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.MyInfoAcknowledge)
  return target;
}

int MyInfoAcknowledge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MyInfoAcknowledge)
  int total_size = 0;

  // required int32 userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyInfoAcknowledge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MyInfoAcknowledge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MyInfoAcknowledge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyInfoAcknowledge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MyInfoAcknowledge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MyInfoAcknowledge)
    MergeFrom(*source);
  }
}

void MyInfoAcknowledge::MergeFrom(const MyInfoAcknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MyInfoAcknowledge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MyInfoAcknowledge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MyInfoAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyInfoAcknowledge::CopyFrom(const MyInfoAcknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MyInfoAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyInfoAcknowledge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MyInfoAcknowledge::Swap(MyInfoAcknowledge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyInfoAcknowledge::InternalSwap(MyInfoAcknowledge* other) {
  std::swap(userid_, other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyInfoAcknowledge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyInfoAcknowledge_descriptor_;
  metadata.reflection = MyInfoAcknowledge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyInfoAcknowledge

// required int32 userId = 1;
bool MyInfoAcknowledge::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MyInfoAcknowledge::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void MyInfoAcknowledge::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MyInfoAcknowledge::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
 ::google::protobuf::int32 MyInfoAcknowledge::userid() const {
  // @@protoc_insertion_point(field_get:chat.MyInfoAcknowledge.userId)
  return userid_;
}
 void MyInfoAcknowledge::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:chat.MyInfoAcknowledge.userId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int connectedUserRequest::kUserIdFieldNumber;
const int connectedUserRequest::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

connectedUserRequest::connectedUserRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.connectedUserRequest)
}

void connectedUserRequest::InitAsDefaultInstance() {
}

connectedUserRequest::connectedUserRequest(const connectedUserRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.connectedUserRequest)
}

void connectedUserRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connectedUserRequest::~connectedUserRequest() {
  // @@protoc_insertion_point(destructor:chat.connectedUserRequest)
  SharedDtor();
}

void connectedUserRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void connectedUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connectedUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connectedUserRequest_descriptor_;
}

const connectedUserRequest& connectedUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

connectedUserRequest* connectedUserRequest::default_instance_ = NULL;

connectedUserRequest* connectedUserRequest::New(::google::protobuf::Arena* arena) const {
  connectedUserRequest* n = new connectedUserRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void connectedUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.connectedUserRequest)
  if (_has_bits_[0 / 32] & 3u) {
    userid_ = 0;
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool connectedUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.connectedUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.connectedUserRequest.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.connectedUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.connectedUserRequest)
  return false;
#undef DO_
}

void connectedUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.connectedUserRequest)
  // optional int32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.connectedUserRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.connectedUserRequest)
}

::google::protobuf::uint8* connectedUserRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.connectedUserRequest)
  // optional int32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.connectedUserRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.connectedUserRequest)
  return target;
}

int connectedUserRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.connectedUserRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connectedUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.connectedUserRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const connectedUserRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const connectedUserRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.connectedUserRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.connectedUserRequest)
    MergeFrom(*source);
  }
}

void connectedUserRequest::MergeFrom(const connectedUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.connectedUserRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void connectedUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.connectedUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connectedUserRequest::CopyFrom(const connectedUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.connectedUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connectedUserRequest::IsInitialized() const {

  return true;
}

void connectedUserRequest::Swap(connectedUserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void connectedUserRequest::InternalSwap(connectedUserRequest* other) {
  std::swap(userid_, other->userid_);
  username_.Swap(&other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata connectedUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connectedUserRequest_descriptor_;
  metadata.reflection = connectedUserRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// connectedUserRequest

// optional int32 userId = 1;
bool connectedUserRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void connectedUserRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void connectedUserRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void connectedUserRequest::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
 ::google::protobuf::int32 connectedUserRequest::userid() const {
  // @@protoc_insertion_point(field_get:chat.connectedUserRequest.userId)
  return userid_;
}
 void connectedUserRequest::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:chat.connectedUserRequest.userId)
}

// optional string username = 2;
bool connectedUserRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void connectedUserRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void connectedUserRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void connectedUserRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& connectedUserRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.connectedUserRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void connectedUserRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.connectedUserRequest.username)
}
 void connectedUserRequest::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.connectedUserRequest.username)
}
 void connectedUserRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.connectedUserRequest.username)
}
 ::std::string* connectedUserRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:chat.connectedUserRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* connectedUserRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.connectedUserRequest.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void connectedUserRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.connectedUserRequest.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectedUser::kUsernameFieldNumber;
const int ConnectedUser::kStatusFieldNumber;
const int ConnectedUser::kUserIdFieldNumber;
const int ConnectedUser::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectedUser::ConnectedUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ConnectedUser)
}

void ConnectedUser::InitAsDefaultInstance() {
}

ConnectedUser::ConnectedUser(const ConnectedUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ConnectedUser)
}

void ConnectedUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectedUser::~ConnectedUser() {
  // @@protoc_insertion_point(destructor:chat.ConnectedUser)
  SharedDtor();
}

void ConnectedUser::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnectedUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectedUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectedUser_descriptor_;
}

const ConnectedUser& ConnectedUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

ConnectedUser* ConnectedUser::default_instance_ = NULL;

ConnectedUser* ConnectedUser::New(::google::protobuf::Arena* arena) const {
  ConnectedUser* n = new ConnectedUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectedUser::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ConnectedUser)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_status()) {
      status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    userid_ = 0;
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConnectedUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ConnectedUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.ConnectedUser.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional string status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.ConnectedUser.status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userId;
        break;
      }

      // optional int32 userId = 3;
      case 3: {
        if (tag == 24) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (tag == 34) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.ConnectedUser.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ConnectedUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ConnectedUser)
  return false;
#undef DO_
}

void ConnectedUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ConnectedUser)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ConnectedUser.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ConnectedUser.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // optional int32 userId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ConnectedUser.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ConnectedUser)
}

::google::protobuf::uint8* ConnectedUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ConnectedUser)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ConnectedUser.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ConnectedUser.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // optional int32 userId = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ConnectedUser.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ConnectedUser)
  return target;
}

int ConnectedUser::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ConnectedUser)
  int total_size = 0;

  // required string username = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional int32 userId = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectedUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ConnectedUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConnectedUser* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectedUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ConnectedUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ConnectedUser)
    MergeFrom(*source);
  }
}

void ConnectedUser::MergeFrom(const ConnectedUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ConnectedUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_status()) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConnectedUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ConnectedUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectedUser::CopyFrom(const ConnectedUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ConnectedUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectedUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectedUser::Swap(ConnectedUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectedUser::InternalSwap(ConnectedUser* other) {
  username_.Swap(&other->username_);
  status_.Swap(&other->status_);
  std::swap(userid_, other->userid_);
  ip_.Swap(&other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectedUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectedUser_descriptor_;
  metadata.reflection = ConnectedUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectedUser

// required string username = 1;
bool ConnectedUser::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConnectedUser::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void ConnectedUser::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConnectedUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& ConnectedUser::username() const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUser.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectedUser::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectedUser.username)
}
 void ConnectedUser::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectedUser.username)
}
 void ConnectedUser::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectedUser.username)
}
 ::std::string* ConnectedUser::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectedUser::release_username() {
  // @@protoc_insertion_point(field_release:chat.ConnectedUser.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectedUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectedUser.username)
}

// optional string status = 2;
bool ConnectedUser::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConnectedUser::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ConnectedUser::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConnectedUser::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
 const ::std::string& ConnectedUser::status() const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUser.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectedUser::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectedUser.status)
}
 void ConnectedUser::set_status(const char* value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectedUser.status)
}
 void ConnectedUser::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectedUser.status)
}
 ::std::string* ConnectedUser::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUser.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectedUser::release_status() {
  // @@protoc_insertion_point(field_release:chat.ConnectedUser.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectedUser::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectedUser.status)
}

// optional int32 userId = 3;
bool ConnectedUser::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConnectedUser::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void ConnectedUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConnectedUser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
 ::google::protobuf::int32 ConnectedUser::userid() const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUser.userId)
  return userid_;
}
 void ConnectedUser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectedUser.userId)
}

// optional string ip = 4;
bool ConnectedUser::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConnectedUser::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void ConnectedUser::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConnectedUser::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& ConnectedUser::ip() const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUser.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectedUser::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectedUser.ip)
}
 void ConnectedUser::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectedUser.ip)
}
 void ConnectedUser::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectedUser.ip)
}
 ::std::string* ConnectedUser::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUser.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectedUser::release_ip() {
  // @@protoc_insertion_point(field_release:chat.ConnectedUser.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectedUser::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectedUser.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectedUserResponse::kConnectedUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectedUserResponse::ConnectedUserResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ConnectedUserResponse)
}

void ConnectedUserResponse::InitAsDefaultInstance() {
}

ConnectedUserResponse::ConnectedUserResponse(const ConnectedUserResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ConnectedUserResponse)
}

void ConnectedUserResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectedUserResponse::~ConnectedUserResponse() {
  // @@protoc_insertion_point(destructor:chat.ConnectedUserResponse)
  SharedDtor();
}

void ConnectedUserResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectedUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectedUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectedUserResponse_descriptor_;
}

const ConnectedUserResponse& ConnectedUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

ConnectedUserResponse* ConnectedUserResponse::default_instance_ = NULL;

ConnectedUserResponse* ConnectedUserResponse::New(::google::protobuf::Arena* arena) const {
  ConnectedUserResponse* n = new ConnectedUserResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectedUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ConnectedUserResponse)
  connectedusers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConnectedUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ConnectedUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chat.ConnectedUser connectedUsers = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_connectedUsers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_connectedusers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_connectedUsers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ConnectedUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ConnectedUserResponse)
  return false;
#undef DO_
}

void ConnectedUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ConnectedUserResponse)
  // repeated .chat.ConnectedUser connectedUsers = 1;
  for (unsigned int i = 0, n = this->connectedusers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connectedusers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ConnectedUserResponse)
}

::google::protobuf::uint8* ConnectedUserResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ConnectedUserResponse)
  // repeated .chat.ConnectedUser connectedUsers = 1;
  for (unsigned int i = 0, n = this->connectedusers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->connectedusers(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ConnectedUserResponse)
  return target;
}

int ConnectedUserResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ConnectedUserResponse)
  int total_size = 0;

  // repeated .chat.ConnectedUser connectedUsers = 1;
  total_size += 1 * this->connectedusers_size();
  for (int i = 0; i < this->connectedusers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connectedusers(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectedUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ConnectedUserResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConnectedUserResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectedUserResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ConnectedUserResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ConnectedUserResponse)
    MergeFrom(*source);
  }
}

void ConnectedUserResponse::MergeFrom(const ConnectedUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ConnectedUserResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  connectedusers_.MergeFrom(from.connectedusers_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConnectedUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ConnectedUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectedUserResponse::CopyFrom(const ConnectedUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ConnectedUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectedUserResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->connectedusers())) return false;
  return true;
}

void ConnectedUserResponse::Swap(ConnectedUserResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectedUserResponse::InternalSwap(ConnectedUserResponse* other) {
  connectedusers_.UnsafeArenaSwap(&other->connectedusers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectedUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectedUserResponse_descriptor_;
  metadata.reflection = ConnectedUserResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectedUserResponse

// repeated .chat.ConnectedUser connectedUsers = 1;
int ConnectedUserResponse::connectedusers_size() const {
  return connectedusers_.size();
}
void ConnectedUserResponse::clear_connectedusers() {
  connectedusers_.Clear();
}
const ::chat::ConnectedUser& ConnectedUserResponse::connectedusers(int index) const {
  // @@protoc_insertion_point(field_get:chat.ConnectedUserResponse.connectedUsers)
  return connectedusers_.Get(index);
}
::chat::ConnectedUser* ConnectedUserResponse::mutable_connectedusers(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ConnectedUserResponse.connectedUsers)
  return connectedusers_.Mutable(index);
}
::chat::ConnectedUser* ConnectedUserResponse::add_connectedusers() {
  // @@protoc_insertion_point(field_add:chat.ConnectedUserResponse.connectedUsers)
  return connectedusers_.Add();
}
::google::protobuf::RepeatedPtrField< ::chat::ConnectedUser >*
ConnectedUserResponse::mutable_connectedusers() {
  // @@protoc_insertion_point(field_mutable_list:chat.ConnectedUserResponse.connectedUsers)
  return &connectedusers_;
}
const ::google::protobuf::RepeatedPtrField< ::chat::ConnectedUser >&
ConnectedUserResponse::connectedusers() const {
  // @@protoc_insertion_point(field_list:chat.ConnectedUserResponse.connectedUsers)
  return connectedusers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeStatusRequest::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeStatusRequest::ChangeStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChangeStatusRequest)
}

void ChangeStatusRequest::InitAsDefaultInstance() {
}

ChangeStatusRequest::ChangeStatusRequest(const ChangeStatusRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ChangeStatusRequest)
}

void ChangeStatusRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeStatusRequest::~ChangeStatusRequest() {
  // @@protoc_insertion_point(destructor:chat.ChangeStatusRequest)
  SharedDtor();
}

void ChangeStatusRequest::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChangeStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeStatusRequest_descriptor_;
}

const ChangeStatusRequest& ChangeStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

ChangeStatusRequest* ChangeStatusRequest::default_instance_ = NULL;

ChangeStatusRequest* ChangeStatusRequest::New(::google::protobuf::Arena* arena) const {
  ChangeStatusRequest* n = new ChangeStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChangeStatusRequest)
  if (has_status()) {
    status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChangeStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChangeStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.ChangeStatusRequest.status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChangeStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChangeStatusRequest)
  return false;
#undef DO_
}

void ChangeStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChangeStatusRequest)
  // required string status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ChangeStatusRequest.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ChangeStatusRequest)
}

::google::protobuf::uint8* ChangeStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChangeStatusRequest)
  // required string status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ChangeStatusRequest.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChangeStatusRequest)
  return target;
}

int ChangeStatusRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChangeStatusRequest)
  int total_size = 0;

  // required string status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChangeStatusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChangeStatusRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChangeStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChangeStatusRequest)
    MergeFrom(*source);
  }
}

void ChangeStatusRequest::MergeFrom(const ChangeStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChangeStatusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChangeStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChangeStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStatusRequest::CopyFrom(const ChangeStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChangeStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeStatusRequest::Swap(ChangeStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeStatusRequest::InternalSwap(ChangeStatusRequest* other) {
  status_.Swap(&other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeStatusRequest_descriptor_;
  metadata.reflection = ChangeStatusRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeStatusRequest

// required string status = 1;
bool ChangeStatusRequest::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeStatusRequest::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeStatusRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeStatusRequest::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
 const ::std::string& ChangeStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatusRequest.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChangeStatusRequest::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChangeStatusRequest.status)
}
 void ChangeStatusRequest::set_status(const char* value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChangeStatusRequest.status)
}
 void ChangeStatusRequest::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChangeStatusRequest.status)
}
 ::std::string* ChangeStatusRequest::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatusRequest.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChangeStatusRequest::release_status() {
  // @@protoc_insertion_point(field_release:chat.ChangeStatusRequest.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChangeStatusRequest::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatusRequest.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeStatusResponse::kUserIdFieldNumber;
const int ChangeStatusResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeStatusResponse::ChangeStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChangeStatusResponse)
}

void ChangeStatusResponse::InitAsDefaultInstance() {
}

ChangeStatusResponse::ChangeStatusResponse(const ChangeStatusResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ChangeStatusResponse)
}

void ChangeStatusResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeStatusResponse::~ChangeStatusResponse() {
  // @@protoc_insertion_point(destructor:chat.ChangeStatusResponse)
  SharedDtor();
}

void ChangeStatusResponse::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChangeStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeStatusResponse_descriptor_;
}

const ChangeStatusResponse& ChangeStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

ChangeStatusResponse* ChangeStatusResponse::default_instance_ = NULL;

ChangeStatusResponse* ChangeStatusResponse::New(::google::protobuf::Arena* arena) const {
  ChangeStatusResponse* n = new ChangeStatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChangeStatusResponse)
  if (_has_bits_[0 / 32] & 3u) {
    userid_ = 0;
    if (has_status()) {
      status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChangeStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChangeStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // required string status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.ChangeStatusResponse.status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChangeStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChangeStatusResponse)
  return false;
#undef DO_
}

void ChangeStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChangeStatusResponse)
  // required int32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ChangeStatusResponse.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ChangeStatusResponse)
}

::google::protobuf::uint8* ChangeStatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChangeStatusResponse)
  // required int32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ChangeStatusResponse.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChangeStatusResponse)
  return target;
}

int ChangeStatusResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.ChangeStatusResponse)
  int total_size = 0;

  if (has_userid()) {
    // required int32 userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  if (has_status()) {
    // required string status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  return total_size;
}
int ChangeStatusResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChangeStatusResponse)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 userId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());

    // required string status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChangeStatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChangeStatusResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeStatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChangeStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChangeStatusResponse)
    MergeFrom(*source);
  }
}

void ChangeStatusResponse::MergeFrom(const ChangeStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChangeStatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_status()) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChangeStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChangeStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStatusResponse::CopyFrom(const ChangeStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChangeStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeStatusResponse::Swap(ChangeStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeStatusResponse::InternalSwap(ChangeStatusResponse* other) {
  std::swap(userid_, other->userid_);
  status_.Swap(&other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeStatusResponse_descriptor_;
  metadata.reflection = ChangeStatusResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeStatusResponse

// required int32 userId = 1;
bool ChangeStatusResponse::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeStatusResponse::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeStatusResponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeStatusResponse::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
 ::google::protobuf::int32 ChangeStatusResponse::userid() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatusResponse.userId)
  return userid_;
}
 void ChangeStatusResponse::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:chat.ChangeStatusResponse.userId)
}

// required string status = 2;
bool ChangeStatusResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangeStatusResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangeStatusResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeStatusResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
 const ::std::string& ChangeStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:chat.ChangeStatusResponse.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChangeStatusResponse::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChangeStatusResponse.status)
}
 void ChangeStatusResponse::set_status(const char* value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChangeStatusResponse.status)
}
 void ChangeStatusResponse::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChangeStatusResponse.status)
}
 ::std::string* ChangeStatusResponse::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:chat.ChangeStatusResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChangeStatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:chat.ChangeStatusResponse.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChangeStatusResponse::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:chat.ChangeStatusResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastRequest::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastRequest::BroadcastRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.BroadcastRequest)
}

void BroadcastRequest::InitAsDefaultInstance() {
}

BroadcastRequest::BroadcastRequest(const BroadcastRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.BroadcastRequest)
}

void BroadcastRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastRequest::~BroadcastRequest() {
  // @@protoc_insertion_point(destructor:chat.BroadcastRequest)
  SharedDtor();
}

void BroadcastRequest::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BroadcastRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastRequest_descriptor_;
}

const BroadcastRequest& BroadcastRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

BroadcastRequest* BroadcastRequest::default_instance_ = NULL;

BroadcastRequest* BroadcastRequest::New(::google::protobuf::Arena* arena) const {
  BroadcastRequest* n = new BroadcastRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BroadcastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.BroadcastRequest)
  if (has_message()) {
    message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BroadcastRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.BroadcastRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.BroadcastRequest.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.BroadcastRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.BroadcastRequest)
  return false;
#undef DO_
}

void BroadcastRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.BroadcastRequest)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.BroadcastRequest.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.BroadcastRequest)
}

::google::protobuf::uint8* BroadcastRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.BroadcastRequest)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.BroadcastRequest.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.BroadcastRequest)
  return target;
}

int BroadcastRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.BroadcastRequest)
  int total_size = 0;

  // required string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.BroadcastRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BroadcastRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.BroadcastRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.BroadcastRequest)
    MergeFrom(*source);
  }
}

void BroadcastRequest::MergeFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.BroadcastRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BroadcastRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRequest::CopyFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadcastRequest::Swap(BroadcastRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BroadcastRequest::InternalSwap(BroadcastRequest* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BroadcastRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastRequest_descriptor_;
  metadata.reflection = BroadcastRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastRequest

// required string message = 1;
bool BroadcastRequest::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BroadcastRequest::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void BroadcastRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void BroadcastRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& BroadcastRequest::message() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastRequest.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BroadcastRequest::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.BroadcastRequest.message)
}
 void BroadcastRequest::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BroadcastRequest.message)
}
 void BroadcastRequest::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BroadcastRequest.message)
}
 ::std::string* BroadcastRequest::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:chat.BroadcastRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BroadcastRequest::release_message() {
  // @@protoc_insertion_point(field_release:chat.BroadcastRequest.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BroadcastRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.BroadcastRequest.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastResponse::kMessageStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastResponse::BroadcastResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.BroadcastResponse)
}

void BroadcastResponse::InitAsDefaultInstance() {
}

BroadcastResponse::BroadcastResponse(const BroadcastResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.BroadcastResponse)
}

void BroadcastResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagestatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastResponse::~BroadcastResponse() {
  // @@protoc_insertion_point(destructor:chat.BroadcastResponse)
  SharedDtor();
}

void BroadcastResponse::SharedDtor() {
  messagestatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BroadcastResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastResponse_descriptor_;
}

const BroadcastResponse& BroadcastResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

BroadcastResponse* BroadcastResponse::default_instance_ = NULL;

BroadcastResponse* BroadcastResponse::New(::google::protobuf::Arena* arena) const {
  BroadcastResponse* n = new BroadcastResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BroadcastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.BroadcastResponse)
  if (has_messagestatus()) {
    messagestatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BroadcastResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.BroadcastResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string messageStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagestatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagestatus().data(), this->messagestatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.BroadcastResponse.messageStatus");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.BroadcastResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.BroadcastResponse)
  return false;
#undef DO_
}

void BroadcastResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.BroadcastResponse)
  // required string messageStatus = 1;
  if (has_messagestatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagestatus().data(), this->messagestatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.BroadcastResponse.messageStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->messagestatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.BroadcastResponse)
}

::google::protobuf::uint8* BroadcastResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.BroadcastResponse)
  // required string messageStatus = 1;
  if (has_messagestatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagestatus().data(), this->messagestatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.BroadcastResponse.messageStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messagestatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.BroadcastResponse)
  return target;
}

int BroadcastResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.BroadcastResponse)
  int total_size = 0;

  // required string messageStatus = 1;
  if (has_messagestatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagestatus());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.BroadcastResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BroadcastResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.BroadcastResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.BroadcastResponse)
    MergeFrom(*source);
  }
}

void BroadcastResponse::MergeFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.BroadcastResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagestatus()) {
      set_has_messagestatus();
      messagestatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagestatus_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BroadcastResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastResponse::CopyFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadcastResponse::Swap(BroadcastResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BroadcastResponse::InternalSwap(BroadcastResponse* other) {
  messagestatus_.Swap(&other->messagestatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BroadcastResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastResponse_descriptor_;
  metadata.reflection = BroadcastResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastResponse

// required string messageStatus = 1;
bool BroadcastResponse::has_messagestatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BroadcastResponse::set_has_messagestatus() {
  _has_bits_[0] |= 0x00000001u;
}
void BroadcastResponse::clear_has_messagestatus() {
  _has_bits_[0] &= ~0x00000001u;
}
void BroadcastResponse::clear_messagestatus() {
  messagestatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messagestatus();
}
 const ::std::string& BroadcastResponse::messagestatus() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastResponse.messageStatus)
  return messagestatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BroadcastResponse::set_messagestatus(const ::std::string& value) {
  set_has_messagestatus();
  messagestatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.BroadcastResponse.messageStatus)
}
 void BroadcastResponse::set_messagestatus(const char* value) {
  set_has_messagestatus();
  messagestatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BroadcastResponse.messageStatus)
}
 void BroadcastResponse::set_messagestatus(const char* value, size_t size) {
  set_has_messagestatus();
  messagestatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BroadcastResponse.messageStatus)
}
 ::std::string* BroadcastResponse::mutable_messagestatus() {
  set_has_messagestatus();
  // @@protoc_insertion_point(field_mutable:chat.BroadcastResponse.messageStatus)
  return messagestatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BroadcastResponse::release_messagestatus() {
  // @@protoc_insertion_point(field_release:chat.BroadcastResponse.messageStatus)
  clear_has_messagestatus();
  return messagestatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BroadcastResponse::set_allocated_messagestatus(::std::string* messagestatus) {
  if (messagestatus != NULL) {
    set_has_messagestatus();
  } else {
    clear_has_messagestatus();
  }
  messagestatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagestatus);
  // @@protoc_insertion_point(field_set_allocated:chat.BroadcastResponse.messageStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastMessage::kMessageFieldNumber;
const int BroadcastMessage::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastMessage::BroadcastMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.BroadcastMessage)
}

void BroadcastMessage::InitAsDefaultInstance() {
}

BroadcastMessage::BroadcastMessage(const BroadcastMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.BroadcastMessage)
}

void BroadcastMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastMessage::~BroadcastMessage() {
  // @@protoc_insertion_point(destructor:chat.BroadcastMessage)
  SharedDtor();
}

void BroadcastMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BroadcastMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastMessage_descriptor_;
}

const BroadcastMessage& BroadcastMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

BroadcastMessage* BroadcastMessage::default_instance_ = NULL;

BroadcastMessage* BroadcastMessage::New(::google::protobuf::Arena* arena) const {
  BroadcastMessage* n = new BroadcastMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BroadcastMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.BroadcastMessage)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BroadcastMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.BroadcastMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.BroadcastMessage.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // required int32 userId = 2;
      case 2: {
        if (tag == 16) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.BroadcastMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.BroadcastMessage)
  return false;
#undef DO_
}

void BroadcastMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.BroadcastMessage)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.BroadcastMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.BroadcastMessage)
}

::google::protobuf::uint8* BroadcastMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.BroadcastMessage)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.BroadcastMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.BroadcastMessage)
  return target;
}

int BroadcastMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.BroadcastMessage)
  int total_size = 0;

  if (has_message()) {
    // required string message = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_userid()) {
    // required int32 userId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  return total_size;
}
int BroadcastMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.BroadcastMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string message = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required int32 userId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.BroadcastMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BroadcastMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.BroadcastMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.BroadcastMessage)
    MergeFrom(*source);
  }
}

void BroadcastMessage::MergeFrom(const BroadcastMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.BroadcastMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BroadcastMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.BroadcastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastMessage::CopyFrom(const BroadcastMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.BroadcastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BroadcastMessage::Swap(BroadcastMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BroadcastMessage::InternalSwap(BroadcastMessage* other) {
  message_.Swap(&other->message_);
  std::swap(userid_, other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BroadcastMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastMessage_descriptor_;
  metadata.reflection = BroadcastMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastMessage

// required string message = 1;
bool BroadcastMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BroadcastMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void BroadcastMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void BroadcastMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& BroadcastMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastMessage.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BroadcastMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.BroadcastMessage.message)
}
 void BroadcastMessage::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.BroadcastMessage.message)
}
 void BroadcastMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.BroadcastMessage.message)
}
 ::std::string* BroadcastMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:chat.BroadcastMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BroadcastMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.BroadcastMessage.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BroadcastMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.BroadcastMessage.message)
}

// required int32 userId = 2;
bool BroadcastMessage::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BroadcastMessage::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void BroadcastMessage::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BroadcastMessage::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
 ::google::protobuf::int32 BroadcastMessage::userid() const {
  // @@protoc_insertion_point(field_get:chat.BroadcastMessage.userId)
  return userid_;
}
 void BroadcastMessage::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:chat.BroadcastMessage.userId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectMessageRequest::kMessageFieldNumber;
const int DirectMessageRequest::kUserIdFieldNumber;
const int DirectMessageRequest::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectMessageRequest::DirectMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.DirectMessageRequest)
}

void DirectMessageRequest::InitAsDefaultInstance() {
}

DirectMessageRequest::DirectMessageRequest(const DirectMessageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.DirectMessageRequest)
}

void DirectMessageRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectMessageRequest::~DirectMessageRequest() {
  // @@protoc_insertion_point(destructor:chat.DirectMessageRequest)
  SharedDtor();
}

void DirectMessageRequest::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DirectMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectMessageRequest_descriptor_;
}

const DirectMessageRequest& DirectMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

DirectMessageRequest* DirectMessageRequest::default_instance_ = NULL;

DirectMessageRequest* DirectMessageRequest::New(::google::protobuf::Arena* arena) const {
  DirectMessageRequest* n = new DirectMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.DirectMessageRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    userid_ = 0;
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DirectMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.DirectMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.DirectMessageRequest.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // optional int32 userId = 2;
      case 2: {
        if (tag == 16) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // optional string username = 3;
      case 3: {
        if (tag == 26) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.DirectMessageRequest.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.DirectMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.DirectMessageRequest)
  return false;
#undef DO_
}

void DirectMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.DirectMessageRequest)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.DirectMessageRequest.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.DirectMessageRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.DirectMessageRequest)
}

::google::protobuf::uint8* DirectMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.DirectMessageRequest)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.DirectMessageRequest.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.DirectMessageRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.DirectMessageRequest)
  return target;
}

int DirectMessageRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.DirectMessageRequest)
  int total_size = 0;

  // required string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.DirectMessageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DirectMessageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.DirectMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.DirectMessageRequest)
    MergeFrom(*source);
  }
}

void DirectMessageRequest::MergeFrom(const DirectMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.DirectMessageRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DirectMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.DirectMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectMessageRequest::CopyFrom(const DirectMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.DirectMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DirectMessageRequest::Swap(DirectMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectMessageRequest::InternalSwap(DirectMessageRequest* other) {
  message_.Swap(&other->message_);
  std::swap(userid_, other->userid_);
  username_.Swap(&other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectMessageRequest_descriptor_;
  metadata.reflection = DirectMessageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectMessageRequest

// required string message = 1;
bool DirectMessageRequest::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DirectMessageRequest::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void DirectMessageRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void DirectMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& DirectMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessageRequest.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DirectMessageRequest::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.DirectMessageRequest.message)
}
 void DirectMessageRequest::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.DirectMessageRequest.message)
}
 void DirectMessageRequest::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.DirectMessageRequest.message)
}
 ::std::string* DirectMessageRequest::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:chat.DirectMessageRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:chat.DirectMessageRequest.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DirectMessageRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.DirectMessageRequest.message)
}

// optional int32 userId = 2;
bool DirectMessageRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DirectMessageRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void DirectMessageRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void DirectMessageRequest::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
 ::google::protobuf::int32 DirectMessageRequest::userid() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessageRequest.userId)
  return userid_;
}
 void DirectMessageRequest::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:chat.DirectMessageRequest.userId)
}

// optional string username = 3;
bool DirectMessageRequest::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DirectMessageRequest::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
void DirectMessageRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
void DirectMessageRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& DirectMessageRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessageRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DirectMessageRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.DirectMessageRequest.username)
}
 void DirectMessageRequest::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.DirectMessageRequest.username)
}
 void DirectMessageRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.DirectMessageRequest.username)
}
 ::std::string* DirectMessageRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:chat.DirectMessageRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectMessageRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.DirectMessageRequest.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DirectMessageRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.DirectMessageRequest.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectMessageResponse::kMessageStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectMessageResponse::DirectMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.DirectMessageResponse)
}

void DirectMessageResponse::InitAsDefaultInstance() {
}

DirectMessageResponse::DirectMessageResponse(const DirectMessageResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.DirectMessageResponse)
}

void DirectMessageResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagestatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectMessageResponse::~DirectMessageResponse() {
  // @@protoc_insertion_point(destructor:chat.DirectMessageResponse)
  SharedDtor();
}

void DirectMessageResponse::SharedDtor() {
  messagestatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DirectMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectMessageResponse_descriptor_;
}

const DirectMessageResponse& DirectMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

DirectMessageResponse* DirectMessageResponse::default_instance_ = NULL;

DirectMessageResponse* DirectMessageResponse::New(::google::protobuf::Arena* arena) const {
  DirectMessageResponse* n = new DirectMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.DirectMessageResponse)
  if (has_messagestatus()) {
    messagestatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DirectMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.DirectMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string messageStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagestatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagestatus().data(), this->messagestatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.DirectMessageResponse.messageStatus");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.DirectMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.DirectMessageResponse)
  return false;
#undef DO_
}

void DirectMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.DirectMessageResponse)
  // required string messageStatus = 1;
  if (has_messagestatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagestatus().data(), this->messagestatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.DirectMessageResponse.messageStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->messagestatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.DirectMessageResponse)
}

::google::protobuf::uint8* DirectMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.DirectMessageResponse)
  // required string messageStatus = 1;
  if (has_messagestatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagestatus().data(), this->messagestatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.DirectMessageResponse.messageStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messagestatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.DirectMessageResponse)
  return target;
}

int DirectMessageResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.DirectMessageResponse)
  int total_size = 0;

  // required string messageStatus = 1;
  if (has_messagestatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagestatus());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.DirectMessageResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DirectMessageResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.DirectMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.DirectMessageResponse)
    MergeFrom(*source);
  }
}

void DirectMessageResponse::MergeFrom(const DirectMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.DirectMessageResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagestatus()) {
      set_has_messagestatus();
      messagestatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagestatus_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DirectMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.DirectMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectMessageResponse::CopyFrom(const DirectMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.DirectMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DirectMessageResponse::Swap(DirectMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectMessageResponse::InternalSwap(DirectMessageResponse* other) {
  messagestatus_.Swap(&other->messagestatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectMessageResponse_descriptor_;
  metadata.reflection = DirectMessageResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectMessageResponse

// required string messageStatus = 1;
bool DirectMessageResponse::has_messagestatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DirectMessageResponse::set_has_messagestatus() {
  _has_bits_[0] |= 0x00000001u;
}
void DirectMessageResponse::clear_has_messagestatus() {
  _has_bits_[0] &= ~0x00000001u;
}
void DirectMessageResponse::clear_messagestatus() {
  messagestatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messagestatus();
}
 const ::std::string& DirectMessageResponse::messagestatus() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessageResponse.messageStatus)
  return messagestatus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DirectMessageResponse::set_messagestatus(const ::std::string& value) {
  set_has_messagestatus();
  messagestatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.DirectMessageResponse.messageStatus)
}
 void DirectMessageResponse::set_messagestatus(const char* value) {
  set_has_messagestatus();
  messagestatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.DirectMessageResponse.messageStatus)
}
 void DirectMessageResponse::set_messagestatus(const char* value, size_t size) {
  set_has_messagestatus();
  messagestatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.DirectMessageResponse.messageStatus)
}
 ::std::string* DirectMessageResponse::mutable_messagestatus() {
  set_has_messagestatus();
  // @@protoc_insertion_point(field_mutable:chat.DirectMessageResponse.messageStatus)
  return messagestatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectMessageResponse::release_messagestatus() {
  // @@protoc_insertion_point(field_release:chat.DirectMessageResponse.messageStatus)
  clear_has_messagestatus();
  return messagestatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DirectMessageResponse::set_allocated_messagestatus(::std::string* messagestatus) {
  if (messagestatus != NULL) {
    set_has_messagestatus();
  } else {
    clear_has_messagestatus();
  }
  messagestatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagestatus);
  // @@protoc_insertion_point(field_set_allocated:chat.DirectMessageResponse.messageStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectMessage::kMessageFieldNumber;
const int DirectMessage::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectMessage::DirectMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.DirectMessage)
}

void DirectMessage::InitAsDefaultInstance() {
}

DirectMessage::DirectMessage(const DirectMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.DirectMessage)
}

void DirectMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectMessage::~DirectMessage() {
  // @@protoc_insertion_point(destructor:chat.DirectMessage)
  SharedDtor();
}

void DirectMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DirectMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectMessage_descriptor_;
}

const DirectMessage& DirectMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

DirectMessage* DirectMessage::default_instance_ = NULL;

DirectMessage* DirectMessage::New(::google::protobuf::Arena* arena) const {
  DirectMessage* n = new DirectMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.DirectMessage)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DirectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.DirectMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.DirectMessage.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // required int32 userId = 2;
      case 2: {
        if (tag == 16) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.DirectMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.DirectMessage)
  return false;
#undef DO_
}

void DirectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.DirectMessage)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.DirectMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.DirectMessage)
}

::google::protobuf::uint8* DirectMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.DirectMessage)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.DirectMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // required int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.DirectMessage)
  return target;
}

int DirectMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.DirectMessage)
  int total_size = 0;

  if (has_message()) {
    // required string message = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_userid()) {
    // required int32 userId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  return total_size;
}
int DirectMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.DirectMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string message = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required int32 userId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.DirectMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DirectMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.DirectMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.DirectMessage)
    MergeFrom(*source);
  }
}

void DirectMessage::MergeFrom(const DirectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.DirectMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DirectMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.DirectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectMessage::CopyFrom(const DirectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.DirectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DirectMessage::Swap(DirectMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectMessage::InternalSwap(DirectMessage* other) {
  message_.Swap(&other->message_);
  std::swap(userid_, other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectMessage_descriptor_;
  metadata.reflection = DirectMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectMessage

// required string message = 1;
bool DirectMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DirectMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void DirectMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void DirectMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& DirectMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessage.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DirectMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.DirectMessage.message)
}
 void DirectMessage::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.DirectMessage.message)
}
 void DirectMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.DirectMessage.message)
}
 ::std::string* DirectMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:chat.DirectMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.DirectMessage.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DirectMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:chat.DirectMessage.message)
}

// required int32 userId = 2;
bool DirectMessage::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DirectMessage::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void DirectMessage::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void DirectMessage::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
 ::google::protobuf::int32 DirectMessage::userid() const {
  // @@protoc_insertion_point(field_get:chat.DirectMessage.userId)
  return userid_;
}
 void DirectMessage::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:chat.DirectMessage.userId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorResponse::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorResponse::ErrorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ErrorResponse)
}

void ErrorResponse::InitAsDefaultInstance() {
}

ErrorResponse::ErrorResponse(const ErrorResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ErrorResponse)
}

void ErrorResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorResponse::~ErrorResponse() {
  // @@protoc_insertion_point(destructor:chat.ErrorResponse)
  SharedDtor();
}

void ErrorResponse::SharedDtor() {
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ErrorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorResponse_descriptor_;
}

const ErrorResponse& ErrorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

ErrorResponse* ErrorResponse::default_instance_ = NULL;

ErrorResponse* ErrorResponse::New(::google::protobuf::Arena* arena) const {
  ErrorResponse* n = new ErrorResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ErrorResponse)
  if (has_errormessage()) {
    errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ErrorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ErrorResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string errorMessage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.ErrorResponse.errorMessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ErrorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ErrorResponse)
  return false;
#undef DO_
}

void ErrorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ErrorResponse)
  // required string errorMessage = 1;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ErrorResponse.errorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->errormessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ErrorResponse)
}

::google::protobuf::uint8* ErrorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ErrorResponse)
  // required string errorMessage = 1;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.ErrorResponse.errorMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->errormessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ErrorResponse)
  return target;
}

int ErrorResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ErrorResponse)
  int total_size = 0;

  // required string errorMessage = 1;
  if (has_errormessage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormessage());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ErrorResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ErrorResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ErrorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ErrorResponse)
    MergeFrom(*source);
  }
}

void ErrorResponse::MergeFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ErrorResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errormessage()) {
      set_has_errormessage();
      errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ErrorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorResponse::CopyFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ErrorResponse::Swap(ErrorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorResponse::InternalSwap(ErrorResponse* other) {
  errormessage_.Swap(&other->errormessage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorResponse_descriptor_;
  metadata.reflection = ErrorResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorResponse

// required string errorMessage = 1;
bool ErrorResponse::has_errormessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ErrorResponse::set_has_errormessage() {
  _has_bits_[0] |= 0x00000001u;
}
void ErrorResponse::clear_has_errormessage() {
  _has_bits_[0] &= ~0x00000001u;
}
void ErrorResponse::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errormessage();
}
 const ::std::string& ErrorResponse::errormessage() const {
  // @@protoc_insertion_point(field_get:chat.ErrorResponse.errorMessage)
  return errormessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrorResponse::set_errormessage(const ::std::string& value) {
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ErrorResponse.errorMessage)
}
 void ErrorResponse::set_errormessage(const char* value) {
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ErrorResponse.errorMessage)
}
 void ErrorResponse::set_errormessage(const char* value, size_t size) {
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ErrorResponse.errorMessage)
}
 ::std::string* ErrorResponse::mutable_errormessage() {
  set_has_errormessage();
  // @@protoc_insertion_point(field_mutable:chat.ErrorResponse.errorMessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ErrorResponse::release_errormessage() {
  // @@protoc_insertion_point(field_release:chat.ErrorResponse.errorMessage)
  clear_has_errormessage();
  return errormessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrorResponse::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    set_has_errormessage();
  } else {
    clear_has_errormessage();
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:chat.ErrorResponse.errorMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientMessage::kOptionFieldNumber;
const int ClientMessage::kUserIdFieldNumber;
const int ClientMessage::kSynchronizeFieldNumber;
const int ClientMessage::kConnectedUsersFieldNumber;
const int ClientMessage::kChangeStatusFieldNumber;
const int ClientMessage::kBroadcastFieldNumber;
const int ClientMessage::kDirectMessageFieldNumber;
const int ClientMessage::kAcknowledgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientMessage::ClientMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ClientMessage)
}

void ClientMessage::InitAsDefaultInstance() {
  synchronize_ = const_cast< ::chat::MyInfoSynchronize*>(&::chat::MyInfoSynchronize::default_instance());
  connectedusers_ = const_cast< ::chat::connectedUserRequest*>(&::chat::connectedUserRequest::default_instance());
  changestatus_ = const_cast< ::chat::ChangeStatusRequest*>(&::chat::ChangeStatusRequest::default_instance());
  broadcast_ = const_cast< ::chat::BroadcastRequest*>(&::chat::BroadcastRequest::default_instance());
  directmessage_ = const_cast< ::chat::DirectMessageRequest*>(&::chat::DirectMessageRequest::default_instance());
  acknowledge_ = const_cast< ::chat::MyInfoAcknowledge*>(&::chat::MyInfoAcknowledge::default_instance());
}

ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ClientMessage)
}

void ClientMessage::SharedCtor() {
  _cached_size_ = 0;
  option_ = 0;
  userid_ = 0;
  synchronize_ = NULL;
  connectedusers_ = NULL;
  changestatus_ = NULL;
  broadcast_ = NULL;
  directmessage_ = NULL;
  acknowledge_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:chat.ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (this != default_instance_) {
    delete synchronize_;
    delete connectedusers_;
    delete changestatus_;
    delete broadcast_;
    delete directmessage_;
    delete acknowledge_;
  }
}

void ClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_descriptor_;
}

const ClientMessage& ClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

ClientMessage* ClientMessage::default_instance_ = NULL;

ClientMessage* ClientMessage::New(::google::protobuf::Arena* arena) const {
  ClientMessage* n = new ClientMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ClientMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClientMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClientMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(option_, userid_);
    if (has_synchronize()) {
      if (synchronize_ != NULL) synchronize_->::chat::MyInfoSynchronize::Clear();
    }
    if (has_connectedusers()) {
      if (connectedusers_ != NULL) connectedusers_->::chat::connectedUserRequest::Clear();
    }
    if (has_changestatus()) {
      if (changestatus_ != NULL) changestatus_->::chat::ChangeStatusRequest::Clear();
    }
    if (has_broadcast()) {
      if (broadcast_ != NULL) broadcast_->::chat::BroadcastRequest::Clear();
    }
    if (has_directmessage()) {
      if (directmessage_ != NULL) directmessage_->::chat::DirectMessageRequest::Clear();
    }
    if (has_acknowledge()) {
      if (acknowledge_ != NULL) acknowledge_->::chat::MyInfoAcknowledge::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ClientMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 option = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_)));
          set_has_option();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // optional int32 userId = 2;
      case 2: {
        if (tag == 16) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_synchronize;
        break;
      }

      // optional .chat.MyInfoSynchronize synchronize = 3;
      case 3: {
        if (tag == 26) {
         parse_synchronize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_synchronize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_connectedUsers;
        break;
      }

      // optional .chat.connectedUserRequest connectedUsers = 4;
      case 4: {
        if (tag == 34) {
         parse_connectedUsers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectedusers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_changeStatus;
        break;
      }

      // optional .chat.ChangeStatusRequest changeStatus = 5;
      case 5: {
        if (tag == 42) {
         parse_changeStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changestatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_broadcast;
        break;
      }

      // optional .chat.BroadcastRequest broadcast = 6;
      case 6: {
        if (tag == 50) {
         parse_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_directMessage;
        break;
      }

      // optional .chat.DirectMessageRequest directMessage = 7;
      case 7: {
        if (tag == 58) {
         parse_directMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_acknowledge;
        break;
      }

      // optional .chat.MyInfoAcknowledge acknowledge = 8;
      case 8: {
        if (tag == 66) {
         parse_acknowledge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acknowledge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ClientMessage)
  return false;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ClientMessage)
  // required int32 option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->option(), output);
  }

  // optional int32 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional .chat.MyInfoSynchronize synchronize = 3;
  if (has_synchronize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->synchronize_, output);
  }

  // optional .chat.connectedUserRequest connectedUsers = 4;
  if (has_connectedusers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->connectedusers_, output);
  }

  // optional .chat.ChangeStatusRequest changeStatus = 5;
  if (has_changestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->changestatus_, output);
  }

  // optional .chat.BroadcastRequest broadcast = 6;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->broadcast_, output);
  }

  // optional .chat.DirectMessageRequest directMessage = 7;
  if (has_directmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->directmessage_, output);
  }

  // optional .chat.MyInfoAcknowledge acknowledge = 8;
  if (has_acknowledge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->acknowledge_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ClientMessage)
}

::google::protobuf::uint8* ClientMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ClientMessage)
  // required int32 option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->option(), target);
  }

  // optional int32 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional .chat.MyInfoSynchronize synchronize = 3;
  if (has_synchronize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->synchronize_, false, target);
  }

  // optional .chat.connectedUserRequest connectedUsers = 4;
  if (has_connectedusers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->connectedusers_, false, target);
  }

  // optional .chat.ChangeStatusRequest changeStatus = 5;
  if (has_changestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->changestatus_, false, target);
  }

  // optional .chat.BroadcastRequest broadcast = 6;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->broadcast_, false, target);
  }

  // optional .chat.DirectMessageRequest directMessage = 7;
  if (has_directmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->directmessage_, false, target);
  }

  // optional .chat.MyInfoAcknowledge acknowledge = 8;
  if (has_acknowledge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->acknowledge_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ClientMessage)
  return target;
}

int ClientMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ClientMessage)
  int total_size = 0;

  // required int32 option = 1;
  if (has_option()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->option());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional int32 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional .chat.MyInfoSynchronize synchronize = 3;
    if (has_synchronize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->synchronize_);
    }

    // optional .chat.connectedUserRequest connectedUsers = 4;
    if (has_connectedusers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->connectedusers_);
    }

    // optional .chat.ChangeStatusRequest changeStatus = 5;
    if (has_changestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->changestatus_);
    }

    // optional .chat.BroadcastRequest broadcast = 6;
    if (has_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->broadcast_);
    }

    // optional .chat.DirectMessageRequest directMessage = 7;
    if (has_directmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->directmessage_);
    }

    // optional .chat.MyInfoAcknowledge acknowledge = 8;
    if (has_acknowledge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->acknowledge_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ClientMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClientMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ClientMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ClientMessage)
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ClientMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_synchronize()) {
      mutable_synchronize()->::chat::MyInfoSynchronize::MergeFrom(from.synchronize());
    }
    if (from.has_connectedusers()) {
      mutable_connectedusers()->::chat::connectedUserRequest::MergeFrom(from.connectedusers());
    }
    if (from.has_changestatus()) {
      mutable_changestatus()->::chat::ChangeStatusRequest::MergeFrom(from.changestatus());
    }
    if (from.has_broadcast()) {
      mutable_broadcast()->::chat::BroadcastRequest::MergeFrom(from.broadcast());
    }
    if (from.has_directmessage()) {
      mutable_directmessage()->::chat::DirectMessageRequest::MergeFrom(from.directmessage());
    }
    if (from.has_acknowledge()) {
      mutable_acknowledge()->::chat::MyInfoAcknowledge::MergeFrom(from.acknowledge());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_synchronize()) {
    if (!this->synchronize_->IsInitialized()) return false;
  }
  if (has_changestatus()) {
    if (!this->changestatus_->IsInitialized()) return false;
  }
  if (has_broadcast()) {
    if (!this->broadcast_->IsInitialized()) return false;
  }
  if (has_directmessage()) {
    if (!this->directmessage_->IsInitialized()) return false;
  }
  if (has_acknowledge()) {
    if (!this->acknowledge_->IsInitialized()) return false;
  }
  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMessage::InternalSwap(ClientMessage* other) {
  std::swap(option_, other->option_);
  std::swap(userid_, other->userid_);
  std::swap(synchronize_, other->synchronize_);
  std::swap(connectedusers_, other->connectedusers_);
  std::swap(changestatus_, other->changestatus_);
  std::swap(broadcast_, other->broadcast_);
  std::swap(directmessage_, other->directmessage_);
  std::swap(acknowledge_, other->acknowledge_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_descriptor_;
  metadata.reflection = ClientMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientMessage

// required int32 option = 1;
bool ClientMessage::has_option() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientMessage::set_has_option() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientMessage::clear_has_option() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientMessage::clear_option() {
  option_ = 0;
  clear_has_option();
}
 ::google::protobuf::int32 ClientMessage::option() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.option)
  return option_;
}
 void ClientMessage::set_option(::google::protobuf::int32 value) {
  set_has_option();
  option_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientMessage.option)
}

// optional int32 userId = 2;
bool ClientMessage::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientMessage::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientMessage::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientMessage::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
 ::google::protobuf::int32 ClientMessage::userid() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.userId)
  return userid_;
}
 void ClientMessage::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientMessage.userId)
}

// optional .chat.MyInfoSynchronize synchronize = 3;
bool ClientMessage::has_synchronize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientMessage::set_has_synchronize() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientMessage::clear_has_synchronize() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientMessage::clear_synchronize() {
  if (synchronize_ != NULL) synchronize_->::chat::MyInfoSynchronize::Clear();
  clear_has_synchronize();
}
const ::chat::MyInfoSynchronize& ClientMessage::synchronize() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.synchronize)
  return synchronize_ != NULL ? *synchronize_ : *default_instance_->synchronize_;
}
::chat::MyInfoSynchronize* ClientMessage::mutable_synchronize() {
  set_has_synchronize();
  if (synchronize_ == NULL) {
    synchronize_ = new ::chat::MyInfoSynchronize;
  }
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.synchronize)
  return synchronize_;
}
::chat::MyInfoSynchronize* ClientMessage::release_synchronize() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.synchronize)
  clear_has_synchronize();
  ::chat::MyInfoSynchronize* temp = synchronize_;
  synchronize_ = NULL;
  return temp;
}
void ClientMessage::set_allocated_synchronize(::chat::MyInfoSynchronize* synchronize) {
  delete synchronize_;
  synchronize_ = synchronize;
  if (synchronize) {
    set_has_synchronize();
  } else {
    clear_has_synchronize();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.synchronize)
}

// optional .chat.connectedUserRequest connectedUsers = 4;
bool ClientMessage::has_connectedusers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientMessage::set_has_connectedusers() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientMessage::clear_has_connectedusers() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientMessage::clear_connectedusers() {
  if (connectedusers_ != NULL) connectedusers_->::chat::connectedUserRequest::Clear();
  clear_has_connectedusers();
}
const ::chat::connectedUserRequest& ClientMessage::connectedusers() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.connectedUsers)
  return connectedusers_ != NULL ? *connectedusers_ : *default_instance_->connectedusers_;
}
::chat::connectedUserRequest* ClientMessage::mutable_connectedusers() {
  set_has_connectedusers();
  if (connectedusers_ == NULL) {
    connectedusers_ = new ::chat::connectedUserRequest;
  }
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.connectedUsers)
  return connectedusers_;
}
::chat::connectedUserRequest* ClientMessage::release_connectedusers() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.connectedUsers)
  clear_has_connectedusers();
  ::chat::connectedUserRequest* temp = connectedusers_;
  connectedusers_ = NULL;
  return temp;
}
void ClientMessage::set_allocated_connectedusers(::chat::connectedUserRequest* connectedusers) {
  delete connectedusers_;
  connectedusers_ = connectedusers;
  if (connectedusers) {
    set_has_connectedusers();
  } else {
    clear_has_connectedusers();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.connectedUsers)
}

// optional .chat.ChangeStatusRequest changeStatus = 5;
bool ClientMessage::has_changestatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientMessage::set_has_changestatus() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientMessage::clear_has_changestatus() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientMessage::clear_changestatus() {
  if (changestatus_ != NULL) changestatus_->::chat::ChangeStatusRequest::Clear();
  clear_has_changestatus();
}
const ::chat::ChangeStatusRequest& ClientMessage::changestatus() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.changeStatus)
  return changestatus_ != NULL ? *changestatus_ : *default_instance_->changestatus_;
}
::chat::ChangeStatusRequest* ClientMessage::mutable_changestatus() {
  set_has_changestatus();
  if (changestatus_ == NULL) {
    changestatus_ = new ::chat::ChangeStatusRequest;
  }
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.changeStatus)
  return changestatus_;
}
::chat::ChangeStatusRequest* ClientMessage::release_changestatus() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.changeStatus)
  clear_has_changestatus();
  ::chat::ChangeStatusRequest* temp = changestatus_;
  changestatus_ = NULL;
  return temp;
}
void ClientMessage::set_allocated_changestatus(::chat::ChangeStatusRequest* changestatus) {
  delete changestatus_;
  changestatus_ = changestatus;
  if (changestatus) {
    set_has_changestatus();
  } else {
    clear_has_changestatus();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.changeStatus)
}

// optional .chat.BroadcastRequest broadcast = 6;
bool ClientMessage::has_broadcast() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientMessage::set_has_broadcast() {
  _has_bits_[0] |= 0x00000020u;
}
void ClientMessage::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClientMessage::clear_broadcast() {
  if (broadcast_ != NULL) broadcast_->::chat::BroadcastRequest::Clear();
  clear_has_broadcast();
}
const ::chat::BroadcastRequest& ClientMessage::broadcast() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.broadcast)
  return broadcast_ != NULL ? *broadcast_ : *default_instance_->broadcast_;
}
::chat::BroadcastRequest* ClientMessage::mutable_broadcast() {
  set_has_broadcast();
  if (broadcast_ == NULL) {
    broadcast_ = new ::chat::BroadcastRequest;
  }
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.broadcast)
  return broadcast_;
}
::chat::BroadcastRequest* ClientMessage::release_broadcast() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.broadcast)
  clear_has_broadcast();
  ::chat::BroadcastRequest* temp = broadcast_;
  broadcast_ = NULL;
  return temp;
}
void ClientMessage::set_allocated_broadcast(::chat::BroadcastRequest* broadcast) {
  delete broadcast_;
  broadcast_ = broadcast;
  if (broadcast) {
    set_has_broadcast();
  } else {
    clear_has_broadcast();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.broadcast)
}

// optional .chat.DirectMessageRequest directMessage = 7;
bool ClientMessage::has_directmessage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClientMessage::set_has_directmessage() {
  _has_bits_[0] |= 0x00000040u;
}
void ClientMessage::clear_has_directmessage() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClientMessage::clear_directmessage() {
  if (directmessage_ != NULL) directmessage_->::chat::DirectMessageRequest::Clear();
  clear_has_directmessage();
}
const ::chat::DirectMessageRequest& ClientMessage::directmessage() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.directMessage)
  return directmessage_ != NULL ? *directmessage_ : *default_instance_->directmessage_;
}
::chat::DirectMessageRequest* ClientMessage::mutable_directmessage() {
  set_has_directmessage();
  if (directmessage_ == NULL) {
    directmessage_ = new ::chat::DirectMessageRequest;
  }
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.directMessage)
  return directmessage_;
}
::chat::DirectMessageRequest* ClientMessage::release_directmessage() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.directMessage)
  clear_has_directmessage();
  ::chat::DirectMessageRequest* temp = directmessage_;
  directmessage_ = NULL;
  return temp;
}
void ClientMessage::set_allocated_directmessage(::chat::DirectMessageRequest* directmessage) {
  delete directmessage_;
  directmessage_ = directmessage;
  if (directmessage) {
    set_has_directmessage();
  } else {
    clear_has_directmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.directMessage)
}

// optional .chat.MyInfoAcknowledge acknowledge = 8;
bool ClientMessage::has_acknowledge() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ClientMessage::set_has_acknowledge() {
  _has_bits_[0] |= 0x00000080u;
}
void ClientMessage::clear_has_acknowledge() {
  _has_bits_[0] &= ~0x00000080u;
}
void ClientMessage::clear_acknowledge() {
  if (acknowledge_ != NULL) acknowledge_->::chat::MyInfoAcknowledge::Clear();
  clear_has_acknowledge();
}
const ::chat::MyInfoAcknowledge& ClientMessage::acknowledge() const {
  // @@protoc_insertion_point(field_get:chat.ClientMessage.acknowledge)
  return acknowledge_ != NULL ? *acknowledge_ : *default_instance_->acknowledge_;
}
::chat::MyInfoAcknowledge* ClientMessage::mutable_acknowledge() {
  set_has_acknowledge();
  if (acknowledge_ == NULL) {
    acknowledge_ = new ::chat::MyInfoAcknowledge;
  }
  // @@protoc_insertion_point(field_mutable:chat.ClientMessage.acknowledge)
  return acknowledge_;
}
::chat::MyInfoAcknowledge* ClientMessage::release_acknowledge() {
  // @@protoc_insertion_point(field_release:chat.ClientMessage.acknowledge)
  clear_has_acknowledge();
  ::chat::MyInfoAcknowledge* temp = acknowledge_;
  acknowledge_ = NULL;
  return temp;
}
void ClientMessage::set_allocated_acknowledge(::chat::MyInfoAcknowledge* acknowledge) {
  delete acknowledge_;
  acknowledge_ = acknowledge;
  if (acknowledge) {
    set_has_acknowledge();
  } else {
    clear_has_acknowledge();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ClientMessage.acknowledge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMessage::kOptionFieldNumber;
const int ServerMessage::kBroadcastFieldNumber;
const int ServerMessage::kMessageFieldNumber;
const int ServerMessage::kErrorFieldNumber;
const int ServerMessage::kMyInfoResponseFieldNumber;
const int ServerMessage::kConnectedUserResponseFieldNumber;
const int ServerMessage::kChangeStatusResponseFieldNumber;
const int ServerMessage::kBroadcastResponseFieldNumber;
const int ServerMessage::kDirectMessageResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMessage::ServerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ServerMessage)
}

void ServerMessage::InitAsDefaultInstance() {
  broadcast_ = const_cast< ::chat::BroadcastMessage*>(&::chat::BroadcastMessage::default_instance());
  message_ = const_cast< ::chat::DirectMessage*>(&::chat::DirectMessage::default_instance());
  error_ = const_cast< ::chat::ErrorResponse*>(&::chat::ErrorResponse::default_instance());
  myinforesponse_ = const_cast< ::chat::MyInfoResponse*>(&::chat::MyInfoResponse::default_instance());
  connecteduserresponse_ = const_cast< ::chat::ConnectedUserResponse*>(&::chat::ConnectedUserResponse::default_instance());
  changestatusresponse_ = const_cast< ::chat::ChangeStatusResponse*>(&::chat::ChangeStatusResponse::default_instance());
  broadcastresponse_ = const_cast< ::chat::BroadcastResponse*>(&::chat::BroadcastResponse::default_instance());
  directmessageresponse_ = const_cast< ::chat::DirectMessageResponse*>(&::chat::DirectMessageResponse::default_instance());
}

ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ServerMessage)
}

void ServerMessage::SharedCtor() {
  _cached_size_ = 0;
  option_ = 0;
  broadcast_ = NULL;
  message_ = NULL;
  error_ = NULL;
  myinforesponse_ = NULL;
  connecteduserresponse_ = NULL;
  changestatusresponse_ = NULL;
  broadcastresponse_ = NULL;
  directmessageresponse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:chat.ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  if (this != default_instance_) {
    delete broadcast_;
    delete message_;
    delete error_;
    delete myinforesponse_;
    delete connecteduserresponse_;
    delete changestatusresponse_;
    delete broadcastresponse_;
    delete directmessageresponse_;
  }
}

void ServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessage_descriptor_;
}

const ServerMessage& ServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mensaje_2eproto();
  return *default_instance_;
}

ServerMessage* ServerMessage::default_instance_ = NULL;

ServerMessage* ServerMessage::New(::google::protobuf::Arena* arena) const {
  ServerMessage* n = new ServerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ServerMessage)
  if (_has_bits_[0 / 32] & 255u) {
    option_ = 0;
    if (has_broadcast()) {
      if (broadcast_ != NULL) broadcast_->::chat::BroadcastMessage::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::chat::DirectMessage::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::chat::ErrorResponse::Clear();
    }
    if (has_myinforesponse()) {
      if (myinforesponse_ != NULL) myinforesponse_->::chat::MyInfoResponse::Clear();
    }
    if (has_connecteduserresponse()) {
      if (connecteduserresponse_ != NULL) connecteduserresponse_->::chat::ConnectedUserResponse::Clear();
    }
    if (has_changestatusresponse()) {
      if (changestatusresponse_ != NULL) changestatusresponse_->::chat::ChangeStatusResponse::Clear();
    }
    if (has_broadcastresponse()) {
      if (broadcastresponse_ != NULL) broadcastresponse_->::chat::BroadcastResponse::Clear();
    }
  }
  if (has_directmessageresponse()) {
    if (directmessageresponse_ != NULL) directmessageresponse_->::chat::DirectMessageResponse::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ServerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 option = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_)));
          set_has_option();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_broadcast;
        break;
      }

      // optional .chat.BroadcastMessage broadcast = 2;
      case 2: {
        if (tag == 18) {
         parse_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional .chat.DirectMessage message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional .chat.ErrorResponse error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_myInfoResponse;
        break;
      }

      // optional .chat.MyInfoResponse myInfoResponse = 5;
      case 5: {
        if (tag == 42) {
         parse_myInfoResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myinforesponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_connectedUserResponse;
        break;
      }

      // optional .chat.ConnectedUserResponse connectedUserResponse = 6;
      case 6: {
        if (tag == 50) {
         parse_connectedUserResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connecteduserresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_changeStatusResponse;
        break;
      }

      // optional .chat.ChangeStatusResponse changeStatusResponse = 7;
      case 7: {
        if (tag == 58) {
         parse_changeStatusResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changestatusresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_broadcastResponse;
        break;
      }

      // optional .chat.BroadcastResponse broadcastResponse = 8;
      case 8: {
        if (tag == 66) {
         parse_broadcastResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcastresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_directMessageResponse;
        break;
      }

      // optional .chat.DirectMessageResponse directMessageResponse = 9;
      case 9: {
        if (tag == 74) {
         parse_directMessageResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directmessageresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ServerMessage)
  return false;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ServerMessage)
  // required int32 option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->option(), output);
  }

  // optional .chat.BroadcastMessage broadcast = 2;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->broadcast_, output);
  }

  // optional .chat.DirectMessage message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->message_, output);
  }

  // optional .chat.ErrorResponse error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->error_, output);
  }

  // optional .chat.MyInfoResponse myInfoResponse = 5;
  if (has_myinforesponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->myinforesponse_, output);
  }

  // optional .chat.ConnectedUserResponse connectedUserResponse = 6;
  if (has_connecteduserresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->connecteduserresponse_, output);
  }

  // optional .chat.ChangeStatusResponse changeStatusResponse = 7;
  if (has_changestatusresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->changestatusresponse_, output);
  }

  // optional .chat.BroadcastResponse broadcastResponse = 8;
  if (has_broadcastresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->broadcastresponse_, output);
  }

  // optional .chat.DirectMessageResponse directMessageResponse = 9;
  if (has_directmessageresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->directmessageresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ServerMessage)
}

::google::protobuf::uint8* ServerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.ServerMessage)
  // required int32 option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->option(), target);
  }

  // optional .chat.BroadcastMessage broadcast = 2;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->broadcast_, false, target);
  }

  // optional .chat.DirectMessage message = 3;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->message_, false, target);
  }

  // optional .chat.ErrorResponse error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->error_, false, target);
  }

  // optional .chat.MyInfoResponse myInfoResponse = 5;
  if (has_myinforesponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->myinforesponse_, false, target);
  }

  // optional .chat.ConnectedUserResponse connectedUserResponse = 6;
  if (has_connecteduserresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->connecteduserresponse_, false, target);
  }

  // optional .chat.ChangeStatusResponse changeStatusResponse = 7;
  if (has_changestatusresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->changestatusresponse_, false, target);
  }

  // optional .chat.BroadcastResponse broadcastResponse = 8;
  if (has_broadcastresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->broadcastresponse_, false, target);
  }

  // optional .chat.DirectMessageResponse directMessageResponse = 9;
  if (has_directmessageresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->directmessageresponse_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ServerMessage)
  return target;
}

int ServerMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ServerMessage)
  int total_size = 0;

  // required int32 option = 1;
  if (has_option()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->option());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional .chat.BroadcastMessage broadcast = 2;
    if (has_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->broadcast_);
    }

    // optional .chat.DirectMessage message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->message_);
    }

    // optional .chat.ErrorResponse error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional .chat.MyInfoResponse myInfoResponse = 5;
    if (has_myinforesponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->myinforesponse_);
    }

    // optional .chat.ConnectedUserResponse connectedUserResponse = 6;
    if (has_connecteduserresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->connecteduserresponse_);
    }

    // optional .chat.ChangeStatusResponse changeStatusResponse = 7;
    if (has_changestatusresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->changestatusresponse_);
    }

    // optional .chat.BroadcastResponse broadcastResponse = 8;
    if (has_broadcastresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->broadcastresponse_);
    }

  }
  // optional .chat.DirectMessageResponse directMessageResponse = 9;
  if (has_directmessageresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->directmessageresponse_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ServerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ServerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ServerMessage)
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ServerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
    if (from.has_broadcast()) {
      mutable_broadcast()->::chat::BroadcastMessage::MergeFrom(from.broadcast());
    }
    if (from.has_message()) {
      mutable_message()->::chat::DirectMessage::MergeFrom(from.message());
    }
    if (from.has_error()) {
      mutable_error()->::chat::ErrorResponse::MergeFrom(from.error());
    }
    if (from.has_myinforesponse()) {
      mutable_myinforesponse()->::chat::MyInfoResponse::MergeFrom(from.myinforesponse());
    }
    if (from.has_connecteduserresponse()) {
      mutable_connecteduserresponse()->::chat::ConnectedUserResponse::MergeFrom(from.connecteduserresponse());
    }
    if (from.has_changestatusresponse()) {
      mutable_changestatusresponse()->::chat::ChangeStatusResponse::MergeFrom(from.changestatusresponse());
    }
    if (from.has_broadcastresponse()) {
      mutable_broadcastresponse()->::chat::BroadcastResponse::MergeFrom(from.broadcastresponse());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_directmessageresponse()) {
      mutable_directmessageresponse()->::chat::DirectMessageResponse::MergeFrom(from.directmessageresponse());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_broadcast()) {
    if (!this->broadcast_->IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message_->IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  if (has_myinforesponse()) {
    if (!this->myinforesponse_->IsInitialized()) return false;
  }
  if (has_connecteduserresponse()) {
    if (!this->connecteduserresponse_->IsInitialized()) return false;
  }
  if (has_changestatusresponse()) {
    if (!this->changestatusresponse_->IsInitialized()) return false;
  }
  if (has_broadcastresponse()) {
    if (!this->broadcastresponse_->IsInitialized()) return false;
  }
  if (has_directmessageresponse()) {
    if (!this->directmessageresponse_->IsInitialized()) return false;
  }
  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMessage::InternalSwap(ServerMessage* other) {
  std::swap(option_, other->option_);
  std::swap(broadcast_, other->broadcast_);
  std::swap(message_, other->message_);
  std::swap(error_, other->error_);
  std::swap(myinforesponse_, other->myinforesponse_);
  std::swap(connecteduserresponse_, other->connecteduserresponse_);
  std::swap(changestatusresponse_, other->changestatusresponse_);
  std::swap(broadcastresponse_, other->broadcastresponse_);
  std::swap(directmessageresponse_, other->directmessageresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMessage_descriptor_;
  metadata.reflection = ServerMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerMessage

// required int32 option = 1;
bool ServerMessage::has_option() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerMessage::set_has_option() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerMessage::clear_has_option() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerMessage::clear_option() {
  option_ = 0;
  clear_has_option();
}
 ::google::protobuf::int32 ServerMessage::option() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.option)
  return option_;
}
 void ServerMessage::set_option(::google::protobuf::int32 value) {
  set_has_option();
  option_ = value;
  // @@protoc_insertion_point(field_set:chat.ServerMessage.option)
}

// optional .chat.BroadcastMessage broadcast = 2;
bool ServerMessage::has_broadcast() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerMessage::set_has_broadcast() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerMessage::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerMessage::clear_broadcast() {
  if (broadcast_ != NULL) broadcast_->::chat::BroadcastMessage::Clear();
  clear_has_broadcast();
}
const ::chat::BroadcastMessage& ServerMessage::broadcast() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.broadcast)
  return broadcast_ != NULL ? *broadcast_ : *default_instance_->broadcast_;
}
::chat::BroadcastMessage* ServerMessage::mutable_broadcast() {
  set_has_broadcast();
  if (broadcast_ == NULL) {
    broadcast_ = new ::chat::BroadcastMessage;
  }
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.broadcast)
  return broadcast_;
}
::chat::BroadcastMessage* ServerMessage::release_broadcast() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.broadcast)
  clear_has_broadcast();
  ::chat::BroadcastMessage* temp = broadcast_;
  broadcast_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_broadcast(::chat::BroadcastMessage* broadcast) {
  delete broadcast_;
  broadcast_ = broadcast;
  if (broadcast) {
    set_has_broadcast();
  } else {
    clear_has_broadcast();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.broadcast)
}

// optional .chat.DirectMessage message = 3;
bool ServerMessage::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerMessage::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerMessage::clear_message() {
  if (message_ != NULL) message_->::chat::DirectMessage::Clear();
  clear_has_message();
}
const ::chat::DirectMessage& ServerMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
::chat::DirectMessage* ServerMessage::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::chat::DirectMessage;
  }
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.message)
  return message_;
}
::chat::DirectMessage* ServerMessage::release_message() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.message)
  clear_has_message();
  ::chat::DirectMessage* temp = message_;
  message_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_message(::chat::DirectMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.message)
}

// optional .chat.ErrorResponse error = 4;
bool ServerMessage::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerMessage::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerMessage::clear_error() {
  if (error_ != NULL) error_->::chat::ErrorResponse::Clear();
  clear_has_error();
}
const ::chat::ErrorResponse& ServerMessage::error() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
::chat::ErrorResponse* ServerMessage::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::chat::ErrorResponse;
  }
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.error)
  return error_;
}
::chat::ErrorResponse* ServerMessage::release_error() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.error)
  clear_has_error();
  ::chat::ErrorResponse* temp = error_;
  error_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_error(::chat::ErrorResponse* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.error)
}

// optional .chat.MyInfoResponse myInfoResponse = 5;
bool ServerMessage::has_myinforesponse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerMessage::set_has_myinforesponse() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerMessage::clear_has_myinforesponse() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerMessage::clear_myinforesponse() {
  if (myinforesponse_ != NULL) myinforesponse_->::chat::MyInfoResponse::Clear();
  clear_has_myinforesponse();
}
const ::chat::MyInfoResponse& ServerMessage::myinforesponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.myInfoResponse)
  return myinforesponse_ != NULL ? *myinforesponse_ : *default_instance_->myinforesponse_;
}
::chat::MyInfoResponse* ServerMessage::mutable_myinforesponse() {
  set_has_myinforesponse();
  if (myinforesponse_ == NULL) {
    myinforesponse_ = new ::chat::MyInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.myInfoResponse)
  return myinforesponse_;
}
::chat::MyInfoResponse* ServerMessage::release_myinforesponse() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.myInfoResponse)
  clear_has_myinforesponse();
  ::chat::MyInfoResponse* temp = myinforesponse_;
  myinforesponse_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_myinforesponse(::chat::MyInfoResponse* myinforesponse) {
  delete myinforesponse_;
  myinforesponse_ = myinforesponse;
  if (myinforesponse) {
    set_has_myinforesponse();
  } else {
    clear_has_myinforesponse();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.myInfoResponse)
}

// optional .chat.ConnectedUserResponse connectedUserResponse = 6;
bool ServerMessage::has_connecteduserresponse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerMessage::set_has_connecteduserresponse() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerMessage::clear_has_connecteduserresponse() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerMessage::clear_connecteduserresponse() {
  if (connecteduserresponse_ != NULL) connecteduserresponse_->::chat::ConnectedUserResponse::Clear();
  clear_has_connecteduserresponse();
}
const ::chat::ConnectedUserResponse& ServerMessage::connecteduserresponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.connectedUserResponse)
  return connecteduserresponse_ != NULL ? *connecteduserresponse_ : *default_instance_->connecteduserresponse_;
}
::chat::ConnectedUserResponse* ServerMessage::mutable_connecteduserresponse() {
  set_has_connecteduserresponse();
  if (connecteduserresponse_ == NULL) {
    connecteduserresponse_ = new ::chat::ConnectedUserResponse;
  }
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.connectedUserResponse)
  return connecteduserresponse_;
}
::chat::ConnectedUserResponse* ServerMessage::release_connecteduserresponse() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.connectedUserResponse)
  clear_has_connecteduserresponse();
  ::chat::ConnectedUserResponse* temp = connecteduserresponse_;
  connecteduserresponse_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_connecteduserresponse(::chat::ConnectedUserResponse* connecteduserresponse) {
  delete connecteduserresponse_;
  connecteduserresponse_ = connecteduserresponse;
  if (connecteduserresponse) {
    set_has_connecteduserresponse();
  } else {
    clear_has_connecteduserresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.connectedUserResponse)
}

// optional .chat.ChangeStatusResponse changeStatusResponse = 7;
bool ServerMessage::has_changestatusresponse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServerMessage::set_has_changestatusresponse() {
  _has_bits_[0] |= 0x00000040u;
}
void ServerMessage::clear_has_changestatusresponse() {
  _has_bits_[0] &= ~0x00000040u;
}
void ServerMessage::clear_changestatusresponse() {
  if (changestatusresponse_ != NULL) changestatusresponse_->::chat::ChangeStatusResponse::Clear();
  clear_has_changestatusresponse();
}
const ::chat::ChangeStatusResponse& ServerMessage::changestatusresponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.changeStatusResponse)
  return changestatusresponse_ != NULL ? *changestatusresponse_ : *default_instance_->changestatusresponse_;
}
::chat::ChangeStatusResponse* ServerMessage::mutable_changestatusresponse() {
  set_has_changestatusresponse();
  if (changestatusresponse_ == NULL) {
    changestatusresponse_ = new ::chat::ChangeStatusResponse;
  }
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.changeStatusResponse)
  return changestatusresponse_;
}
::chat::ChangeStatusResponse* ServerMessage::release_changestatusresponse() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.changeStatusResponse)
  clear_has_changestatusresponse();
  ::chat::ChangeStatusResponse* temp = changestatusresponse_;
  changestatusresponse_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_changestatusresponse(::chat::ChangeStatusResponse* changestatusresponse) {
  delete changestatusresponse_;
  changestatusresponse_ = changestatusresponse;
  if (changestatusresponse) {
    set_has_changestatusresponse();
  } else {
    clear_has_changestatusresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.changeStatusResponse)
}

// optional .chat.BroadcastResponse broadcastResponse = 8;
bool ServerMessage::has_broadcastresponse() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ServerMessage::set_has_broadcastresponse() {
  _has_bits_[0] |= 0x00000080u;
}
void ServerMessage::clear_has_broadcastresponse() {
  _has_bits_[0] &= ~0x00000080u;
}
void ServerMessage::clear_broadcastresponse() {
  if (broadcastresponse_ != NULL) broadcastresponse_->::chat::BroadcastResponse::Clear();
  clear_has_broadcastresponse();
}
const ::chat::BroadcastResponse& ServerMessage::broadcastresponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.broadcastResponse)
  return broadcastresponse_ != NULL ? *broadcastresponse_ : *default_instance_->broadcastresponse_;
}
::chat::BroadcastResponse* ServerMessage::mutable_broadcastresponse() {
  set_has_broadcastresponse();
  if (broadcastresponse_ == NULL) {
    broadcastresponse_ = new ::chat::BroadcastResponse;
  }
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.broadcastResponse)
  return broadcastresponse_;
}
::chat::BroadcastResponse* ServerMessage::release_broadcastresponse() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.broadcastResponse)
  clear_has_broadcastresponse();
  ::chat::BroadcastResponse* temp = broadcastresponse_;
  broadcastresponse_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_broadcastresponse(::chat::BroadcastResponse* broadcastresponse) {
  delete broadcastresponse_;
  broadcastresponse_ = broadcastresponse;
  if (broadcastresponse) {
    set_has_broadcastresponse();
  } else {
    clear_has_broadcastresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.broadcastResponse)
}

// optional .chat.DirectMessageResponse directMessageResponse = 9;
bool ServerMessage::has_directmessageresponse() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ServerMessage::set_has_directmessageresponse() {
  _has_bits_[0] |= 0x00000100u;
}
void ServerMessage::clear_has_directmessageresponse() {
  _has_bits_[0] &= ~0x00000100u;
}
void ServerMessage::clear_directmessageresponse() {
  if (directmessageresponse_ != NULL) directmessageresponse_->::chat::DirectMessageResponse::Clear();
  clear_has_directmessageresponse();
}
const ::chat::DirectMessageResponse& ServerMessage::directmessageresponse() const {
  // @@protoc_insertion_point(field_get:chat.ServerMessage.directMessageResponse)
  return directmessageresponse_ != NULL ? *directmessageresponse_ : *default_instance_->directmessageresponse_;
}
::chat::DirectMessageResponse* ServerMessage::mutable_directmessageresponse() {
  set_has_directmessageresponse();
  if (directmessageresponse_ == NULL) {
    directmessageresponse_ = new ::chat::DirectMessageResponse;
  }
  // @@protoc_insertion_point(field_mutable:chat.ServerMessage.directMessageResponse)
  return directmessageresponse_;
}
::chat::DirectMessageResponse* ServerMessage::release_directmessageresponse() {
  // @@protoc_insertion_point(field_release:chat.ServerMessage.directMessageResponse)
  clear_has_directmessageresponse();
  ::chat::DirectMessageResponse* temp = directmessageresponse_;
  directmessageresponse_ = NULL;
  return temp;
}
void ServerMessage::set_allocated_directmessageresponse(::chat::DirectMessageResponse* directmessageresponse) {
  delete directmessageresponse_;
  directmessageresponse_ = directmessageresponse;
  if (directmessageresponse) {
    set_has_directmessageresponse();
  } else {
    clear_has_directmessageresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ServerMessage.directMessageResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)
